using System;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using WeaponKeywords.Types;
using Noggog;

namespace WeaponKeywords
{
    public class Program
    {
        static Lazy<Database> LazyDB = new();
        static Database DB => LazyDB.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Database", "database.json", out LazyDB)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynWeaponKeywords.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Dictionary<string, List<IKeywordGetter>> formkeys = new();
            foreach (var (key, value) in DB.DB)
            {
                foreach (var src in DB.sources)
                {
                    if (value.keyword == null) continue;

                    var keywords = state.LoadOrder.PriorityOrder.Keyword().WinningOverrides()
                        .Where(x => x.FormKey.ModKey.Equals(src))
                        .Where(x => value.keyword.Contains(x.EditorID ?? ""));

                    foreach (var keyword in keywords)
                    {
                        if (keyword == null) continue;

                        if (!formkeys.ContainsKey(key))
                        {
                            formkeys[key] = new List<IKeywordGetter>();
                        }

                        formkeys[key].Add(keyword);
                    }
                }
            }
            state.LoadOrder.PriorityOrder.Weapon().WinningOverrides().ForEach(weapon =>
            {
                var edid = weapon.EditorID;
                var nameToTest = weapon.Name?.String?.ToLower();
                var matchingKeywords = DB.DB
                    .Where(kv => kv.Value.commonNames.Any(cn => nameToTest?.Contains(cn) ?? false))
                    .Select(kv => kv.Key)
                    .ToArray();
                var globalExclude = DB.excludes.phrases
                    .Any(ph => nameToTest?.Contains(ph) ?? false) ||
                    DB.excludes.weapons.Contains(edid ?? "");
                var isOneHanded = !(weapon.EquipmentType.FormKey.Equals(Skyrim.EquipType.BothHands.FormKey));
                if (DB.includes.ContainsKey(edid ?? ""))
                {
                    var nw = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                    if (formkeys.ContainsKey(DB.includes[edid ?? ""]))
                    {
                        Console.WriteLine($"{nameToTest}:\n\t{nw.Name}: {nw.EditorID} is {DB.DB[DB.includes[edid ?? ""]].outputDescription}:");
                        foreach (var keyform in formkeys[DB.includes[edid ?? ""]])
                        {
                            if (!nw.HasKeyword(keyform))
                            {
                                nw.Keywords?.Add(keyform.FormKey);
                                Console.WriteLine($"\t\tAdded Keyword {keyform.EditorID} from {keyform.FormKey.ModKey}");
                            }
                        }
                        if (nw.Data != null)
                        {
                            if (isOneHanded)
                            {
                                nw.Data.AnimationType = DB.DB[DB.includes[edid ?? ""]].OneHandedAnimation;
                                Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[DB.includes[edid ?? ""]].OneHandedAnimation}");
                            }
                            else
                            {
                                nw.Data.AnimationType = DB.DB[DB.includes[edid ?? ""]].TwoHandedAnimation;
                                Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[DB.includes[edid ?? ""]].TwoHandedAnimation}");
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine($"{nameToTest} is {DB.DB[DB.includes[edid ?? ""]].outputDescription}, but not changing (missing keywords?)");
                    }
                }
                if (matchingKeywords.Length > 0 && !globalExclude)
                {
                    Console.WriteLine($"{nameToTest}:\n\tMatching Keywords: {string.Join(",", matchingKeywords)}");
                    var nw = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                    foreach (var kyd in matchingKeywords)
                    {
                        if (formkeys.ContainsKey(kyd) && !DB.DB[kyd].exclude.Any(cn => nameToTest?.Contains(cn) ?? false))
                        {
                            Console.WriteLine($"\t{nw.Name}: {nw.EditorID} from {nw.FormKey.ModKey} is {DB.DB[kyd].outputDescription}:");
                            foreach (var keyform in formkeys[kyd])
                            {
                                if (DB.DB[kyd].excludeSource.Contains(keyform.FormKey.ModKey)) continue;

                                if (!nw.HasKeyword(keyform.FormKey))
                                {
                                    nw.Keywords?.Add(keyform.FormKey);
                                    Console.WriteLine($"\t\tAdded keyword {keyform.EditorID} from {keyform.FormKey.ModKey}");
                                }
                            }
                        }
                    }
                    if (nw.Data != null)
                    {
                        var fKeyword = matchingKeywords.First();
                        if (isOneHanded)
                        {
                            nw.Data.AnimationType = DB.DB[fKeyword].OneHandedAnimation;
                            Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[fKeyword].OneHandedAnimation}");
                        }
                        else
                        {
                            nw.Data.AnimationType = DB.DB[fKeyword].TwoHandedAnimation;
                            Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[fKeyword].TwoHandedAnimation}");
                        }
                    }
                }
            });
        }
    }
}